import styles from "../styles/Home.module.css";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";

import { ConnectButton } from "@rainbow-me/rainbowkit";
import { useAccount } from "wagmi";
import { useReadRaws } from "../blockchain/aggregates/read.raw";
import { useApprove } from "../blockchain/aggregates/approve.token";
import { HostApproval } from "../blockchain/events/host.approved.event";
import { StimulusApproval } from "../blockchain/events/stimulus.approval.event";
import { useLock } from "../blockchain/aggregates/lock";
import { useFusion } from "../blockchain/aggregates/fusion";
import { useLabs } from "../blockchain/labs";

function Home() {
  const [selectedHost, setSelectedHost] = useState(0);
  const [selectedStimulus, setSelectedStimulus] = useState(0);
  const { address, isConnected } = useAccount();
  const { hostData, stimulusData, isError, isLoading } = useReadRaws(address);
  const { approveHost, approveStimulus, approved } = useApprove(
    selectedHost,
    selectedStimulus
  );

  const hostApproved = HostApproval();
  const stimulusApproved = StimulusApproval();

  const { lock } = useLock(hostApproved, stimulusApproved);
  const { fusion } = useFusion(selectedHost, selectedStimulus);
  const { isFusionable } = useLabs(selectedHost, selectedHost);

  function approve() {
    approveHost();
    approveStimulus();
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Oppabear Labs</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ConnectButton />
      <div>{address}</div>
      <Link href="/minting">mint mock nfts [host, stimulus]</Link>
      <div>
        {!address ? (
          <div>Loading ..</div>
        ) : (
          <div>
            <div>
              <label>Host</label>
              <select onChange={(event) => setSelectedHost(event.target.value)}>
                <option key={0} value={null}>
                  select
                </option>
                {hostData.map((data) => {
                  return (
                    <option key={data.toString()} value={data.toString()}>
                      {data.toString()}
                    </option>
                  );
                })}
              </select>
            </div>
            <div>
              <label>Stimulus</label>
              <select
                onChange={(event) => setSelectedStimulus(event.target.value)}
              >
                <option key={0} value={null}>
                  select
                </option>
                {stimulusData.map((data) => {
                  return (
                    <option key={data.toString()} value={data.toString()}>
                      {data.toString()}
                    </option>
                  );
                })}
              </select>
            </div>
            <div>
              <button
                disabled={!approveHost || !approveStimulus}
                onClick={() => approve()}
              >
                Approve
              </button>
              <button disabled={!lock} onClick={() => lock()}>
                Lock
              </button>
              <button disabled={!isFusionable} onClick={() => fusion()}>
                Fusion
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default Home;
