import styles from "../styles/Home.module.css";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";

import { ConnectButton } from "@rainbow-me/rainbowkit";
import { useAccount } from "wagmi";
import { useReadRaws } from "../blockchain/aggregates/read.raw";
import { useApprove } from "../blockchain/aggregates/approve.token";
import { HostApproval } from "../blockchain/events/host.approved.event";
import { StimulusApproval } from "../blockchain/events/stimulus.approval.event";
import { useLock } from "../blockchain/aggregates/lock";
import { useFusion } from "../blockchain/aggregates/fusion";
import { useLabs } from "../blockchain/labs";
import { useGetFusionablePairs } from "../blockchain/aggregates/read.locked";
import { TokenLocked } from "../blockchain/events/locked.event";

function Home() {
  const [selectedTab, setSelected] = useState(0);
  const { address, isConnected } = useAccount();

  return (
    <div className={styles.container}>
      <Head>
        <title>Fusion Labs - Test</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Link href="/minting">
        <h3>Mint mock nfts [host, stimulus]</h3>
      </Link>
      <ConnectButton />
      {isConnected ? (
        <div>
          <ul className={styles.tabs}>
            <li>
              <button onClick={() => setSelected(0)}>Lock Page</button>
            </li>
            <li>
              <button onClick={() => setSelected(1)}>Fusion Page</button>
            </li>
          </ul>

          <div className={styles.actions}>
            {selectedTab == 0 ? (
              <LockTab address={address} />
            ) : (
              <FusionTab address={address} />
            )}
          </div>
        </div>
      ) : (
        <h3>Fusions labs - Test</h3>
      )}
    </div>
  );
}

function LockTab({ address }) {
  const [isLoaded, setIsLoaded] = useState(0);
  const [selectedHost, setSelectedHost] = useState(0);
  const [selectedStimulus, setSelectedStimulus] = useState(0);
  const { hostData, stimulusData, isError, isLoading } = useReadRaws(address);
  const { approveHost, approveStimulus, approved } = useApprove(
    selectedHost,
    selectedStimulus
  );

  const hostApproved = parseInt(HostApproval().approval.toString());
  const stimulusApproved = parseInt(StimulusApproval().approval.toString());
  const locked = parseInt(TokenLocked().locked.toString());
  const { lock } = useLock(selectedHost, selectedStimulus);

  useEffect(() => {
    if (stimulusApproved > 0) {
      setIsLoaded(stimulusApproved);
    }

    if (locked > 0) {
      setIsLoaded(locked);
    }
  }, [stimulusApproved, locked]);

  function approve() {
    approveHost();
    approveStimulus();
  }

  return (
    <div>
      <div>
        {!address ? (
          <div>Loading ..</div>
        ) : (
          <div className={styles.actions}>
            <div>
              <label htmlFor="host">Host</label>
              <select
                id="host"
                onChange={(event) => setSelectedHost(event.target.value)}
              >
                <option key={0} value={null}>
                  select
                </option>
                {hostData.map((data) => {
                  return (
                    <option key={data.toString()} value={data.toString()}>
                      {data.toString()}
                    </option>
                  );
                })}
              </select>
            </div>
            <div>
              <label htmlFor="stimulus">Stimulus</label>
              <select
                id="stimulus"
                onChange={(event) => setSelectedStimulus(event.target.value)}
              >
                <option key={0} value={null}>
                  select
                </option>
                {stimulusData.map((data) => {
                  return (
                    <option key={data.toString()} value={data.toString()}>
                      {data.toString()}
                    </option>
                  );
                })}
              </select>
            </div>
            <div>
              <button
                disabled={!approveHost || !approveStimulus}
                onClick={() => {
                  setIsLoaded(0);
                  approve();
                }}
              >
                Approve
              </button>
              <button
                disabled={!lock}
                onClick={() => {
                  setIsLoaded(0);
                  lock();
                }}
              >
                Lock
              </button>
            </div>
          </div>
        )}
      </div>
      {isLoaded <= 0 ? <div></div> : <Loading />}
    </div>
  );
}

function FusionTab({ address }) {
  const [selectedPair, setSelectedPair] = useState({ host: 0, stimulus: 0 });
  const { data } = useGetFusionablePairs(address);
  const { isFusionable } = useLabs(selectedPair.host, selectedPair.stimulus);
  const { fusion } = useFusion(selectedPair.host, selectedPair.stimulus);

  if (data.length <= 0) {
    return <div>no locked pairs</div>;
  }

  return (
    <div>
      {data ? (
        <div>
          <label>Locked Pairs</label>
          <select
            onChange={(event) => {
              console.log(event.target.value);
              if (event.target.value == "select") {
                setSelectedPair({ host: 0, stimulus: 0 });
              } else {
                const parsedEvent = JSON.parse(event.target.value);
                setSelectedPair(parsedEvent);
              }
            }}
          >
            <option key={0} value={null}>
              select
            </option>
            {data.map((pairs) => {
              return (
                <option key={pairs.host} value={JSON.stringify(pairs)}>
                  {pairs.host} with {pairs.stimulus}
                </option>
              );
            })}
          </select>
          <button disabled={!isFusionable && !fusion} onClick={() => fusion()}>
            Fusion
          </button>
        </div>
      ) : (
        <div>no locked pairs</div>
      )}
    </div>
  );
}

function Loading() {
  return <h1>Success</h1>;
}

export default Home;
