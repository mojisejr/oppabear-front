import styles from "../../styles/Home.module.css";
import Head from "next/head";
import Link from "next/link";
import Header from "../../components/Header";
import ImageBox from "../../components/ImageBox";

import { useState } from "react";
import { useAccount } from "wagmi";
import { useReadRaws } from "../../blockchain/aggregates/read.raw";
import { useApprove } from "../../blockchain/aggregates/approve.token";
import { useFusion } from "../../blockchain/aggregates/fusion";
import { TokenLocked } from "../../blockchain/events/locked.event";

function HomeV2() {
  const { address, isConnected } = useAccount();

  return (
    <div className="bg-gradient-to-b from-[#1A2B45] to-slate-800 h-screen">
      <Head>
        <title>Fusion Labs - Test</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <div className="flex justify-center">
        <div
          id="image-box-section"
          className="absolute h-[500px] flex space-x-[5%] justify-center items-center text-white z-[20]"
        >
          <ImageBox
            sign={"+"}
            desc={"Drag & Drop Oppa Bear Evolution Gen.1 below"}
          />
          <ImageBox sign={"+"} desc={"Drag & Drop"} />
        </div>
        <div
          id="nft-box-section"
          className="absolute bottom-0 h-[500px] w-[60%] bg-gradient-to-b from-[#0E1937] text-white  z-[10] rounded-t-[50px] shadow-[10px_-20px_30px_-15px_rgba(0,0,0,0.8)]"
        >
          <div
            id="wallet-tag"
            className="relative top-[20%] left-[-1%] p-3 rounded-r-3xl bg-[#F0CC52] w-[15%] text-center shadow-[0_2px_10px_0_rgba(0,0,0,0.8)] text-black text-[18px]"
          >
            Your Wallet
          </div>
          <div id="nft-container ">
            <div className="grid gap-4 grid-col-2">
              <div>1</div>
              <div>2</div>
            </div>
          </div>
        </div>
      </div>

      {/* <Link href="/minting">
        <h3>Mint mock nfts [host, stimulus]</h3>
      </Link> */}

      {/* {isConnected ? (
        <div className={styles.actions}>
          <LockTab address={address} />
        </div>
      ) : (
        <h3>Fusions labs - Test</h3>
      )} */}
    </div>
  );
}

function LockTab({ address }) {
  const [isLoaded, setIsLoaded] = useState(0);
  const [selectedHost, setSelectedHost] = useState(0);
  const [selectedStimulus, setSelectedStimulus] = useState(0);
  const { hostData, stimulusData, isError, isLoading } = useReadRaws(address);
  const { approveHost, approveStimulus, approved } = useApprove(
    selectedHost,
    selectedStimulus
  );

  const locked = parseInt(TokenLocked().locked.toString());
  const { fusion } = useFusion(selectedHost, selectedStimulus);

  function approve() {
    approveHost();
    approveStimulus();
  }

  function doFusion() {
    fusion();
  }

  return (
    <div>
      <div>
        {!address ? (
          <div>Loading ..</div>
        ) : (
          <div className={styles.actions}>
            <div>
              <label htmlFor="host">Host</label>
              <select
                id="host"
                onChange={(event) => setSelectedHost(event.target.value)}
              >
                <option key={0} value={null}>
                  select
                </option>
                {hostData.map((data) => {
                  return (
                    <option key={data.toString()} value={data.toString()}>
                      {data.toString()}
                    </option>
                  );
                })}
              </select>
            </div>
            <div>
              <label htmlFor="stimulus">Stimulus</label>
              <select
                id="stimulus"
                onChange={(event) => setSelectedStimulus(event.target.value)}
              >
                <option key={0} value={null}>
                  select
                </option>
                {stimulusData.map((data) => {
                  return (
                    <option key={data.toString()} value={data.toString()}>
                      {data.toString()}
                    </option>
                  );
                })}
              </select>
            </div>
            <div>
              <button
                disabled={
                  selectedHost <= 0 || selectedStimulus <= 0 || !approve
                }
                onClick={() => {
                  setIsLoaded(0);
                  approve();
                }}
              >
                approve
              </button>
              <button
                disabled={selectedHost <= 0 || selectedStimulus <= 0 || !fusion}
                onClick={() => {
                  setIsLoaded(0);
                  doFusion();
                }}
              >
                Fusion
              </button>
            </div>
          </div>
        )}
      </div>
      {isLoaded <= 0 ? <div></div> : <Loading />}
    </div>
  );
}

function Loading() {
  return <h1>Success</h1>;
}

export default HomeV2;

{
  /* <div id="tokens-container" className="relative top-[25%]">
            <div
              id="tokens-container-inner"
              className="flex pr-[3%] pl-[3%] justify-center gap-[10%]"
            >
              <div id="main-token-box">
                <ul id="main-token-list-box" className="flex gap-[10px]">
                  <li>
                    <div
                      id="tokens-card"
                      className="w-[180px] h-[180px] bg-slate-400 shadow-sm rounded-xl"
                    ></div>
                  </li>
                  <li>
                    <div
                      id="tokens-card"
                      className="w-[180px] h-[180px] bg-slate-400 shadow-sm rounded-xl"
                    ></div>
                  </li>
                  <li>
                    <div
                      id="tokens-card"
                      className="w-[180px] h-[180px] bg-slate-400 shadow-sm rounded-xl"
                    ></div>
                  </li>
                  <li>
                    <div
                      id="tokens-card"
                      className="w-[180px] h-[180px] bg-slate-400 shadow-sm rounded-xl"
                    ></div>
                  </li>
                </ul>
              </div>
              <div id="sub-token-box">
                <ul id="main-token-list" className="flex gap-[10px] flex-wrap">
                  <li>
                    <div
                      id="tokens-card"
                      className="w-[180px] h-[180px] bg-pink-400 shadow-sm rounded-xl"
                    ></div>
                  </li>
                  <li>
                    <div
                      id="tokens-card"
                      className="w-[180px] h-[180px] bg-pink-400 shadow-sm rounded-xl"
                    ></div>
                  </li>
                </ul>
              </div>
            </div>
          </div> */
}
